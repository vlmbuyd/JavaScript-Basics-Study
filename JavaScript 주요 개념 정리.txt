** JavaScript 작동 방식

JavaScript (브라우저)는 스크립트를 로드할 때
기본적으로 위에서부터 아래로 실행함. 
(한 번 읽기가 끝나면 end. 다시 실행하지 않음)
실행 전 파일 전체를 미리 읽어
정의된 함수를 찾아낸 후
자동으로 함수들을 맨 위로 끌어옴 
-> 함수를 어느 위치에 정의하든 상관 없음
(설령 함수 정의 전 함수를 호출하더라도)

cf. 변수와 상수는 미리 선언해야 함
-> 초기화 안해도 ok : 해야되는 것 같음..
ex. let currentResult;
______________________________________________________________________________
** 함수
전역적으로 정의된 변수, 상수를 함수 내부에서 사용 가능
<-> 반대로 함수 내부에서 정의된 변수, 상수, 함수는 함수 외부에서 사용 불가

retrun문 : 함수 실행을 종료시킴
-> 그 뒤에 오는 코드는 실행되지 않음
-> 이런 맥락에서 return문은 하나만 있어야 함 (return 다음에 함수 종료)


※ 주의
결국 전역 상수 및 변수로 작동할 수 있는 명확한 함수를 만드는 것이 목적
but, 내부 데이터, 일부 반환 값들과 과도하게 혼합하여 사용하는 것은 지양
일반적으로, 함수가 일부 전역 변수를 조작하는 것은 괜찮지만 return하는 것은 지양.
-> 함수가 특정 값을 return하여 다른 것을을 바꾸기 시작하면 혼돈이 생기기 때문
ex. return값으로 인한 전역 변수 변경
(함수의 용도에 맞게 return 여부를 잘 파악하여 쓸 것)

※ add() vs add
add() : 이 문장이 나올 때마다 add 함수 실행
add : 특정 조건(ex. 이벤트 발생)이 일어났을 때 add 함수 실행

______________________________________________________________________________
** 숫자 & 문자열 섞기
3 * '3' => 9 : ※ 문자열 '9'가 아닌 숫자 9를 산출!
3 - '3' => 0

cf. 3 + '3' => '33' 
+ 연산 : 문자열 접합 | 산술 연산자 中 유일하게 문자열 지원

______________________________________________________________________________
- {} 를 사용하여 "데이터 그룹화"를 통해 객체 생성 가능
 -> 닫히는 } 뒤에 세미콜론(;)이 사용. 
cf. 함수에서는 이렇게 하지 않음. 
일반적으로 {} 가 등호 오른쪽에 있는 경우 {} 뒤에 세미콜론이 사용!

______________________________________________________________________________
** Special Values
- undefined : 초기화 되지 않은 변수의 기본값 == '아무것도 없음'
		변수 생성 후 등호로 값을 할당하지 않을 경우 그 변수는 undefined가 됨

-  null : '데이터가 없다'는 의미, (객체의 유형을 갖음)
	   기본값이 될 수 없음 -> 직접 null로 설정해줘야 함
	   (변수를 재설정하거나 정리하고 싶을 때 주로 사용)

- NaN (Not a Number) : 숫자 타입(number) -> 계산에 사용 可
			일종의 오류 코드 -> 잘못된 입력 (ex. 숫자로 변환할 수 없는 숫자				와 텍스트를 혼합했을 때)으로 수학 계산을 실행했을 때	  
	NaN을 사용하여 계산한 결과 == NaN -> '계산의 결과가 유효하지 않다'










