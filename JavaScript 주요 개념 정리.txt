JavaScript (브라우저)는 스크립트를 로드할 때
기본적으로 위에서부터 아래로 실행함. 
(한 번 읽기가 끝나면 end. 다시 실행하지 않음)
실행 전 파일 전체를 미리 읽어
정의된 함수를 찾아낸 후
자동으로 함수들을 맨 위로 끌어옴 
-> 함수를 어느 위치에 정의하든 상관 없음
(설령 함수 정의 전 함수를 호출하더라도)

cf. 변수와 상수는 미리 선언해야 함
-> 초기화 안해도 ok
ex. let currentResult;
_____________________________________________________________________
**함수
전역적으로 정의된 변수, 상수를 함수 내부에서 사용 가능
<-> 반대로 함수 내부에서 정의된 변수, 상수, 함수는 함수 외부에서 사용 불가

retrun문 : 함수 실행을 종료시킴
-> 그 뒤에 오는 코드는 실행되지 않음
-> 이런 맥락에서 return문은 하나만 있어야 함 (return 다음에 함수 종료)


※주의
결국 전역 상수 및 변수로 작동할 수 있는 명확한 함수를 만드는 것이 목적
but, 내부 데이터, 일부 반환 값들과 과도하게 혼합하여 사용하는 것은 지양
일반적으로, 함수가 일부 전역 변수를 조작하는 것은 괜찮지만 return하는 것은 지양.
-> 함수가 특정 값을 return하여 다른 것을을 바꾸기 시작하면 혼돈이 생기기 때문
ex. return값으로 인한 전역 변수 변경
(함수의 용도에 맞게 return 여부를 잘 파악하여 쓸 것)

※ add() vs add
add() : 이 문장이 나올 때마다 add 함수 실행
add : 특정 조건(ex. 이벤트 발생)이 일어났을 때 add 함수 실행